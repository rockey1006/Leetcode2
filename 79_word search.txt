题意理解：https://www.youtube.com/watch?v=oUeGFKZvoo4&t=509s

求解给定字符串str，是否在字符矩阵array中。要求str中相邻的两个字符，在array中也是相邻字符，并且要求，array中的同一字符，不能使用两次
题目分析：

1. 使用回溯法；
2. 注意array中同一字符不能使用两次；
主要考察对数组操作的运用，采用迷路寻路回溯的方法进行处理。需要写一个功能函数用来判断是否该位置的字符满足所需求，
此后进行上下左右的后一字符的递归检验，与此同时需要添加一个辅助的boolean二维数组判断该位置是否已经被走过。
需要额外说的是，由于数组在递归的过程中值被改变则该数组即被改变（意思是再进行新的一次递归时，值也已经被改变了），
在进行回溯处理时，需要额外将标记此位置是否已经被检测过的boolean二维数组进行修正。
时间复杂度search:O(4^l),l=len(word);total:O(m*n*4^l).
No additional space：用一个bit mask，After board[y][x] ^= 256 the char became not a valid letter. After second board[y][x] ^= 256，
it became a valid letter again。


class Solution {
   public boolean exist(char[][] board, String word) {//在二维字符数组中找是否存在指定的字符串。输入：二维数组和字符串
    char[] w = word.toCharArray();//把字符串转成字符串数组
    for (int y=0; y<board.length; y++) {
    	for (int x=0; x<board[y].length; x++) {
    		if (exist(board, y, x, w, 0)) return true;//查找用回溯法：调用一个函数遍历整个二维数组，向指定的方向的顺序深度查找。
            //这个函数用递归实现
    	}
    }
    return false;
}

private boolean exist(char[][] board, int y, int x, char[] word, int i) {//定义回溯查找的函数，参数是二维数组，横下标，纵下标，指定的字符数组，指定的字符数组的下标 i
	if (i == word.length) return true;//递归结束的条件：i的初始值是0，i=word.length说明已经找到最后一个match的字符。
	if (y<0 || x<0 || y == board.length || x == board[y].length) return false;//corner case
	if (board[y][x] != word[i]) return false;//遍历的每个点都要等于指定字符的相应点
	board[y][x] ^= 256;//用一个bit mask，After board[y][x] ^= 256 the char became not a valid letter. After second board[y][x] ^= 256，it became a valid letter again.
	boolean exist = exist(board, y, x+1, word, i+1)//分别从四个方向查找
		|| exist(board, y, x-1, word, i+1)
		|| exist(board, y+1, x, word, i+1)
		|| exist(board, y-1, x, word, i+1);
	board[y][x] ^= 256;
	return exist;
}
}

