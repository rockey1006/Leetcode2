题解：输入一个整数数组，从中找到所有的三个整数组成一个数组，这三个整数的和为0。要求不包括重复的结果。
思路：双指针法，
输入：数组。输出：会自动扩增容量的list，这个list的每一个元素也是一个list。
先排序
从第三个元素开始作为base遍历，看是否每一个base和前面的所有任意两个元素有没有相加为零，从第三个的好处是可以省去写跳过end指针指到复制的元素的步骤。
定义两个指针，一个指到0，一个指到base的前面一个index，两个指针分别向中间夹，直到找到和base相加为0 的两个元素。如果找到就放进list，
然后因为可能不止一对可以和base相加为0，所以start指针继续遍历直到把所有组合可能性找出来。
两个指针交叉结束内循环。这样就可以把base前面的所有组合都找出来，然后再到下一个base。遍历完整个数组外循环结束。

需要注意跳过复制的元素的情况，一个是base跳过，一个是指针跳过。
时间复杂度：O(n^2)
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {//输入：数组。输出：会自动扩增容量的list，这个list的每一个元素也是一个list。
        List<List<Integer>> result = new ArrayList<>();//定义一个返回的list
        if (nums == null || nums.length == 0) {
            return result;//corner case
        }
        Arrays.sort(nums);//排序
        for (int i = 2; i < nums.length; i++) {//从第三个元素开始作为base遍历，看是否每一个base和前面的所有元素有没有相加为零
            if (i + 1 < nums.length && nums[i] == nums[i + 1]) {
                continue;//从第三个的好处是可以省去写跳过end指针指到复制的元素的步骤
            }
            int start = 0;//定义两个指针，一个指到0，一个指到base的前面一个index，两个指针分别向中间夹，直到找到和base相加为0 的两个元素
            int end = i - 1;
            while (start < end) {//两个指针交叉结束循环
                if (nums[start] + nums[end] + nums[i] == 0) {
                    result.add(Arrays.asList(nums[start], nums[end], nums[i]));
                    start++;//如果找到就放进list，然后因为可能不止一对可以和base相加为0，所以start指针继续遍历直到把所有组合可能性找出来
                    while (start < end && nums[start - 1] == nums[start]) { // skip duplicates
                        start++;
                    }
                } else if (nums[start] + nums[end] + nums[i] < 0) {
                    start++;//如果相加结果小于0，start指针+1
                } else {
                    end--;//反之end指针-1
                }
            }
        }
        return result;
    }
}
